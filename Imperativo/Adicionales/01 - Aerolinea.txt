{
1. Una aerolínea dispone de un árbol binario de búsqueda con la información de sus
empleados. De cada empleado se conoce: Número de legajo, Dni, Categoría (1..20) y año de
ingreso a la empresa. El árbol se encuentra ordenado por número de legajo. Se solicita:
a. Implementar un módulo que reciba el árbol de empleados, número de legajo “A”,
número de legajo “B” y un número de categoría, y retorne un vector ordenado por
número de legajo. El vector debe contener el número de legajo y Dni de aquellos
empleados cuyo número de legajo se encuentra comprendido entre los números de
legajo recibidos (“A” y “B”, siendo “A” menor que “B”) y la categoría se corresponda con
la recibida por parámetro. Por norma de la empresa, cada categoría puede contar con
a lo sumo 250 empleados.
b. Implementar un módulo recursivo que reciba la información generada en “b” y retorne
el promedio de los números de Dni.
 
}


program adicionales;
CONST
	DIMF = 250;
	CORTE = -1;
TYPE
	cat = 1..20;
    empleado = record	
		legajo: integer;
		dni: integer;
		categoria: cat;
		ingreso:integer;
	end;
	
	abb = ^nodo;
	nodo = record
		elemento: empleado;
		HI: abb;
		HD: abb;
	end;
	
	registro = record
		legajo: integer;
		dni: integer;
	end;
	vector_ordenado = array[1..DIMF] of registro;



procedure leer(var e:empleado);
begin
	write('Legajo: ');readln(e.legajo);
	if(e.legajo <> CORTE) then begin
		write('dni: ');readln(e.dni);
		write('Categoria: ');readln(e.categoria);
		write('Ingreso: ');readln(e.ingreso);
	end;
end;

procedure crearNodo(var a:abb; e:empleado);
begin
	if(a = nil) then begin
		new(a);
		a^.elemento:=e;
		a^.HI := nil; 
		a^.HD := nil;
	end
	else 
		if(e.legajo<a^.elemento.legajo) then
			crearNodo(a^.HI, e)
		else
			crearNodo(a^.HD, e);
end;

procedure crearArbol(var a:abb);
var
	e:empleado;
begin
	leer(e);
	while(e.legajo <> CORTE) do begin
		crearNodo(a, e);
		leer(e);
	end;
end;

procedure agregarVector(a:abb; var v:vector_ordenado; var dimL:integer);
var
	ele: registro;
begin
	ele.legajo:= a^.elemento.legajo;
	ele.dni:= a^.elemento.dni;
	if(dimL<DIMF)then begin
		v[dimL+1]:=ele;
		dimL+=1;
	end;
end;

procedure recorrerAcotado(a:abb; piso:integer; tope:integer; categoria:cat; var vector:vector_ordenado; var dimL:integer);
begin
	if(a<>nil) then begin
		if((a^.elemento.legajo >= piso) and (a^.elemento.legajo<= tope)) then begin
			recorrerAcotado(a^.HI, piso, tope, categoria, vector, dimL);
			if(a^.elemento.categoria = categoria) then
				agregarVector(a, vector, dimL);
			recorrerAcotado(a^.HD, piso, tope,categoria,  vector, dimL);
		end
		else begin
			if(a^.elemento.legajo>piso) then
				recorrerAcotado(a^.HD, piso, tope, categoria, vector, dimL)
			else
				recorrerAcotado(A^.HI, piso, tope, categoria, vector, dimL);
		end;
	end;
end;

procedure imprimirVector(v:vector_ordenado; dimL:integer);
var
	i:integer;
begin

	for i:=1 to dimL do
		writeln('Legajo: ',v[i].legajo,' - DNI: ',v[i].dni);
end;

function promedio(v:vector_ordenado; dimL:integer; suma:integer; i:integer):real;
begin
	if(i = dimL) then begin
		suma+=v[i].dni;
		promedio:=  suma / dimL
	end
	else 
		promedio:= promedio(v, dimL, suma + v[i].dni, i+1);
end;
{
* *****************************************
*                      PROGRAMA PRINCIPAL
* *****************************************
}


var 
	arbol: abb;
	v: vector_ordenado;
	dimL:integer;
	inf, sup: integer;
	c: cat;
BEGIN
	arbol:= nil;
	crearArbol(arbol);
	dimL:= 0;
	write('Legajo inferior: ');readln(inf);
	write('Legajo superior: ');readln(sup);
	write('Categoria: ');readln(c);
	recorrerAcotado(arbol, inf, sup,c, v, dimL);
	imprimirVector(v, diml);
	
	writeln('El promedio del vector es: ', promedio(v,diml, 0, 1):1:2);
END.

